{"ast":null,"code":"/**\n * The main generic class that defines the main properties of the class, T: defines the TYPE to use and I defined the interface that of \"content\" property will use\n */\nvar ContentDefinition =\n/** @class */\nfunction () {\n  function ContentDefinition() {\n    /**\n     * The content that is shaped on every called method\n     */\n    this.content = {};\n  }\n\n  Object.defineProperty(ContentDefinition.prototype, \"end\", {\n    /**\n     * @returns  the built content\n     */\n    get: function () {\n      return this.content;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Break a page\n   * @param brk when it break a page (before, after)\n   */\n\n  ContentDefinition.prototype.pageBreak = function (brk) {\n    this.content.pageBreak = brk;\n    return this;\n  };\n  /**\n   * Change the orientation with a page break\n   * @param orientation The orientation\n   * @param brk the form of page break\n   */\n\n\n  ContentDefinition.prototype.pageOrientationAndBreak = function (orientation, brk) {\n    this.content.pageOrientation = orientation;\n    this.content.pageBreak = brk;\n    return this;\n  };\n  /**\n   * Helper to use with automatically page break\n   * @param data Any data\n   */\n\n\n  ContentDefinition.prototype.headlineLevel = function (data) {\n    this.content.headlineLevel = data;\n    return this;\n  };\n  /**\n   * Sets an ID to an object, This is useful for referencing an object\n   * @param id ID\n   */\n\n\n  ContentDefinition.prototype.id = function (id) {\n    this.content.id = id;\n    return this;\n  };\n\n  return ContentDefinition;\n}();\n\nexport { ContentDefinition }; //# sourceMappingURL=content-definition.js.map","map":null,"metadata":{},"sourceType":"module"}