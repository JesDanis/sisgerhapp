{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Vector } from './vector';\n/**\n * Creates a rect vector\n */\n\nvar Rect =\n/** @class */\nfunction (_super) {\n  __extends(Rect, _super);\n  /**\n   * if either of the params receive one number (`new Rect(10,10)`):\n   *  * `point` is applied to `x` and `y`\n   *  * `size` is applied to `w` (width) and `h` (height)\n   *\n   * if either of the params receive a tuple (`new Rect([10, 5],[20, 30])`)\n   *  * `point[0]` is applied to `x` and `point[1]` is applied to `y`\n   *  * `size[0]` is applied to `w` (width) and `size[1]` is applied to `h` (height)\n   *\n   * @param point the point where the rect will be drawn\n   * @param size the size of the rect\n   */\n\n\n  function Rect(point, size) {\n    var _this = _super.call(this, 'rect') || this;\n\n    _this.setPoint(point);\n\n    _this.setSize(size);\n\n    return _this;\n  }\n  /**\n   * Sets the point to the rect vector\n   * @param point the point of the rect vector\n   */\n\n\n  Rect.prototype.setPoint = function (point) {\n    if (Array.isArray(point)) {\n      this.content.x = point[0];\n      this.content.y = point[1];\n    } else {\n      this.content.x = point;\n      this.content.y = point;\n    }\n  };\n  /**\n   * Sets the size of the rect vector\n   * @param size the sixe of the rect vector\n   */\n\n\n  Rect.prototype.setSize = function (size) {\n    if (Array.isArray(size)) {\n      this.content.w = size[0];\n      this.content.h = size[1];\n    } else {\n      this.content.w = size;\n      this.content.h = size;\n    }\n  };\n  /**\n   * round the borders\n   * @param num radius number\n   */\n\n\n  Rect.prototype.round = function (num) {\n    this.content.r = num;\n    return this;\n  };\n\n  return Rect;\n}(Vector);\n\nexport { Rect }; //# sourceMappingURL=rect.js.map","map":null,"metadata":{},"sourceType":"module"}