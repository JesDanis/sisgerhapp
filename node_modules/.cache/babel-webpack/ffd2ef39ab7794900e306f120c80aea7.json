{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { isBase64 } from './utils/is-base64';\n/**\n * Class that contains the essencial for the document definition\n */\n\nvar DocumentDefinition =\n/** @class */\nfunction () {\n  function DocumentDefinition() {\n    /**\n     * It defines the pdf definition\n     */\n    this.definition = {\n      content: []\n    };\n\n    if (DocumentDefinition.usedFont) {\n      this.defaultStyle(DocumentDefinition.usedFont);\n    }\n  }\n  /**\n   * Sets the font that will be used to generate a PDF\n   * @param fontName The font type configuration name\n   */\n\n\n  DocumentDefinition.useFont = function (fontName) {\n    DocumentDefinition.usedFont = {\n      font: fontName\n    };\n  };\n  /**\n   * It adds content to the PDF body\n   * @param content any content\n   */\n\n\n  DocumentDefinition.prototype.add = function (content) {\n    this.definition.content.push(content);\n  };\n  /**\n   * Preload images setting a name to each images\n   *\n   * @example\n   * { picture1: 'data:image/jpeg;base64...' } or { picture1: await new Img('/path/image.png').build() }\n   *\n   * @param imgs Dictionary of default images\n   */\n\n\n  DocumentDefinition.prototype.images = function (imgs) {\n    var newImgs = {};\n\n    for (var img in imgs) {\n      if (typeof imgs[img] === 'string' && isBase64(imgs[img])) {\n        newImgs[img] = imgs[img]; // it's probably that the first condition is not passed for the regex condition, but it's a string yet\n      } else if (typeof imgs[img] !== 'string') {\n        newImgs[img] = imgs[img].image;\n      }\n    }\n\n    this.definition.images = newImgs;\n  };\n  /**\n   * Preload styles setting a name to each custom styles\n   *\n   * @example\n   * { style1: { bold: true, fontSize: 15 } }\n   *\n   * @param styles Dictionary of default styles\n   */\n\n\n  DocumentDefinition.prototype.styles = function (styles) {\n    this.definition.styles = styles;\n  };\n  /**\n   * Preload styles setting name to each custom style that is applied to whole PDF.\n   * Some styles won't work\n   *\n   * @example\n   * { style1: { bold: true, fontSize: 15 } }\n   *\n   * @param styles Dictionary of default styles\n   */\n\n\n  DocumentDefinition.prototype.defaultStyle = function (styles) {\n    this.definition.defaultStyle = __assign(__assign({}, this.definition.defaultStyle || {}), styles);\n  };\n  /**\n   * Set a header definition\n   * @param header Data that is applied as header\n   */\n\n\n  DocumentDefinition.prototype.header = function (header) {\n    this.definition.header = header;\n  };\n  /**\n   * Set a footer definition\n   * @param footer Data that is applied as footer\n   */\n\n\n  DocumentDefinition.prototype.footer = function (footer) {\n    this.definition.footer = footer;\n  };\n  /**\n   * Set a background layer definition\n   * @param background Data that is applied as background\n   */\n\n\n  DocumentDefinition.prototype.background = function (background) {\n    this.definition.background = background;\n  };\n  /**\n   * Set the page size\n   * @param size The page size\n   */\n\n\n  DocumentDefinition.prototype.pageSize = function (size) {\n    this.definition.pageSize = size;\n  };\n  /**\n   * Set the page margin\n   * @param margin The page margin\n   */\n\n\n  DocumentDefinition.prototype.pageMargins = function (margin) {\n    this.definition.pageMargins = margin;\n  };\n  /**\n   * Set the page orientation\n   * @param orientation the orientation\n   */\n\n\n  DocumentDefinition.prototype.pageOrientation = function (orientation) {\n    this.definition.pageOrientation = orientation;\n  };\n  /**\n   * Break the page before the condition defined\n   * @param breakBefore Function that defines the break of the page\n   */\n\n\n  DocumentDefinition.prototype.pageBreakBefore = function (breakBefore) {\n    this.definition.pageBreakBefore = breakBefore;\n  };\n  /**\n   * Set metadata to the document, you can set a custom metadata\n   * @param info The metadata\n   */\n\n\n  DocumentDefinition.prototype.info = function (info) {\n    this.definition.info = info;\n  };\n  /**\n   * It defines if use compress\n   * @param compress\n   */\n\n\n  DocumentDefinition.prototype.compress = function (compress) {\n    this.definition.compress = compress;\n  };\n  /**\n   * Set a watermark\n  */\n\n\n  DocumentDefinition.prototype.watermark = function (watermark) {\n    this.definition.watermark = watermark;\n  };\n  /**\n   * Set a raw content\n  */\n\n\n  DocumentDefinition.prototype.rawContent = function (content) {\n    this.definition.content = content;\n  };\n  /**\n   * Sets a password to the PDF to encrypt it and when an user wants to open the document\n   * a popup will be shown to type the password\n   * @param password\n   */\n\n\n  DocumentDefinition.prototype.userPassword = function (password) {\n    this.definition.userPassword = password;\n  };\n  /**\n   * Sets access privileges providing an owner password and the privileges setting\n   * @param password The password\n   * @param permissions The permission setting\n   */\n\n\n  DocumentDefinition.prototype.permissions = function (password, permissions) {\n    this.definition.ownerPassword = password;\n    this.definition.permissions = permissions;\n  };\n  /**\n   * Gets the document definition\n   */\n\n\n  DocumentDefinition.prototype.getDefinition = function () {\n    return this.definition;\n  };\n\n  return DocumentDefinition;\n}();\n\nexport { DocumentDefinition }; //# sourceMappingURL=document-definition.js.map","map":null,"metadata":{},"sourceType":"module"}