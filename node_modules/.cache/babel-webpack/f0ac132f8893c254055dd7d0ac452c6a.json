{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Vector } from './vector';\n/**\n * Creates a ellipse vector\n */\n\nvar Ellipse =\n/** @class */\nfunction (_super) {\n  __extends(Ellipse, _super);\n  /**\n   * if either of the params receive one number (`new Ellipse(10,10)`):\n   *  * `point` is applied to `x` and `y`\n   *  * `radius` is applied to `r1` (radius1) and `r2` (radius2)\n   *\n   * if either of the params receive a tuple (`new Ellipse([10, 5],[20, 30])`)\n   *  * `point[0]` is applied to `x` and `point[1]` is applied to `y`\n   *  * `radius[0]` is applied to `r1` (radius1) and `radius[1]` is applied to `r2` (radius2)\n   *\n   * @param point the point where the ellipse will be drawn\n   * @param radius the radius of the ellipse\n   */\n\n\n  function Ellipse(point, radius) {\n    var _this = _super.call(this, 'ellipse') || this;\n\n    _this.setPoint(point);\n\n    _this.setRadius(radius);\n\n    return _this;\n  }\n  /**\n   * Sets the point to the ellipse vector\n   * @param point the point of the ellipse vector\n   */\n\n\n  Ellipse.prototype.setPoint = function (point) {\n    if (Array.isArray(point)) {\n      this.content.x = point[0];\n      this.content.y = point[1];\n    } else {\n      this.content.x = point;\n      this.content.y = point;\n    }\n  };\n  /**\n   * Sets the radius to the ellipse vector\n   * @param radius the radius of the ellipse vector\n   */\n\n\n  Ellipse.prototype.setRadius = function (radius) {\n    if (Array.isArray(radius)) {\n      this.content.r1 = radius[0];\n      this.content.r2 = radius[1];\n    } else {\n      this.content.r1 = radius;\n      this.content.r2 = radius;\n    }\n  };\n\n  return Ellipse;\n}(Vector);\n\nexport { Ellipse }; //# sourceMappingURL=ellipse.js.map","map":null,"metadata":{},"sourceType":"module"}