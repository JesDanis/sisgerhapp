{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { StyleDefinition } from '../style-definition';\n/**\n * Class to create a table\n */\n\nvar Table =\n/** @class */\nfunction (_super) {\n  __extends(Table, _super);\n  /**\n   * @param _body receives an array of arrays\n   */\n\n\n  function Table(_body) {\n    var _this = _super.call(this) || this;\n\n    _this._body = _body;\n    _this.content.table = {};\n    _this.content.table.body = _this._body;\n    return _this;\n  }\n  /**\n   * @param layout set table layout {lightHorizontalLines|noBorders|headerLineOnly|ICustomTableLayout}\n   */\n\n\n  Table.prototype.layout = function (layout) {\n    this.content.layout = layout;\n    return this;\n  };\n  /**\n   * @param rows set number of header rows\n   */\n\n\n  Table.prototype.headerRows = function (rows) {\n    this.content.table.headerRows = rows;\n    return this;\n  };\n  /**\n   * @param widths set table widths\n   */\n\n\n  Table.prototype.widths = function (widths) {\n    this.content.table.widths = widths;\n    return this;\n  };\n  /**\n   * @param heights set table heights\n   */\n\n\n  Table.prototype.heights = function (heights) {\n    this.content.table.heights = heights;\n    return this;\n  };\n  /**\n   * @param apply move the table to the next page when it will be cut it for a breaking page\n   */\n\n\n  Table.prototype.dontBreakRows = function (apply) {\n    this.content.table.dontBreakRows = apply;\n    return this;\n  };\n  /**\n   * @param rows number of rows that are held next to the header\n   */\n\n\n  Table.prototype.keepWithHeaderRows = function (rows) {\n    this.content.table.keepWithHeaderRows = rows;\n    return this;\n  };\n\n  return Table;\n}(StyleDefinition);\n\nexport { Table }; //# sourceMappingURL=table.js.map","map":null,"metadata":{},"sourceType":"module"}