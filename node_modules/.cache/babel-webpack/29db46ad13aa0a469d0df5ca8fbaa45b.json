{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Vector } from './vector';\n/**\n * Creates a line vector\n */\n\nvar Line =\n/** @class */\nfunction (_super) {\n  __extends(Line, _super);\n  /**\n   * if either of the params receive one number (`new Line(10,10)`):\n   *  * `point1` is applied to `x1` and `y1`\n   *  * `point2` is applied to `x2` and `y2`\n   *\n   * if either of the params receive a tuple (`new Line([10, 5],[20, 30])`)\n   *  * `point1[0]` is applied to `x1` and `point1[1]` is applied to `y1`\n   *  * `point2[0]` is applied to `x2` and `point2[1]` is applied to `y2`\n   *\n   * @param point1 the first point where the line will start\n   * @param point2 the second point where the line will finish\n   */\n\n\n  function Line(point1, point2) {\n    var _this = _super.call(this, 'line') || this;\n\n    _this.setPoint1(point1);\n\n    _this.setPoint2(point2);\n\n    return _this;\n  }\n  /**\n   * Sets the first point to the line vector\n   * @param point the point of the line vector\n   */\n\n\n  Line.prototype.setPoint1 = function (point) {\n    if (Array.isArray(point)) {\n      this.content.x1 = point[0];\n      this.content.y1 = point[1];\n    } else {\n      this.content.x1 = point;\n      this.content.y1 = point;\n    }\n  };\n  /**\n   * Sets the second point to the line vector\n   * @param point the point of the line vector\n   */\n\n\n  Line.prototype.setPoint2 = function (point) {\n    if (Array.isArray(point)) {\n      this.content.x2 = point[0];\n      this.content.y2 = point[1];\n    } else {\n      this.content.x2 = point;\n      this.content.y2 = point;\n    }\n  };\n\n  return Line;\n}(Vector);\n\nexport { Line }; //# sourceMappingURL=line.js.map","map":null,"metadata":{},"sourceType":"module"}