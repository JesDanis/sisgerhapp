{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { DocumentDefinition } from './document-definition';\nimport pdfMake from 'pdfmake/build/pdfmake';\n/**\n * Main class that contains the essencial for build the PDF\n */\n\nvar PdfMakeWrapper =\n/** @class */\nfunction (_super) {\n  __extends(PdfMakeWrapper, _super);\n\n  function PdfMakeWrapper() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Sets custom fonts. This changes the global font types\n   * @param fonts {{ [propName: string]: string }} The generated fonts object\n   * @param fontTypesConfig {{ [propName: string]: IFontTypes }} The font type configuration\n   *\n   * @example\n   * import { PdfMakeWrapper } from 'pdfmake-wrapper';\n   * import customFonts 'path/to/custom/fonts';\n   *\n   * PdfMakeWrapper.setFonts(\n   *  customFonts,\n   *  {\n   *      customFonts: { // The property name can be any\n   *          normal: 'custom-fonts.ttf',\n   *          bold: 'custom-fonts-bold.ttf',\n   *          italics: 'custom-fonts-italics.ttf',\n   *          bolditalics: 'custom-fonts-bolditalics.ttf'\n   *      },\n   *      ...\n   *  }\n   * );\n   */\n\n\n  PdfMakeWrapper.setFonts = function (fonts, fontTypesConfig) {\n    pdfMake.vfs = fonts.pdfMake.vfs;\n\n    if (fontTypesConfig) {\n      pdfMake.fonts = fontTypesConfig;\n    }\n  };\n  /**\n   * Create the PDF\n   */\n\n\n  PdfMakeWrapper.prototype.create = function () {\n    return pdfMake.createPdf(this.getDefinition());\n  }; // ======================== HELPERS =========================\n\n  /**\n   * It returns new lines\n   * @param num numbers of newline\n   * @deprecated This will be deprecated in next minor version\n   */\n\n\n  PdfMakeWrapper.prototype.ln = function (num) {\n    if (num === void 0) {\n      num = 1;\n    }\n\n    if (num < 1) num = 1;\n    return '\\n'.repeat(num);\n  };\n\n  return PdfMakeWrapper;\n}(DocumentDefinition);\n\nexport { PdfMakeWrapper }; //# sourceMappingURL=pdfmake-wrapper.js.map","map":null,"metadata":{},"sourceType":"module"}